geom_point(color = "grey",alpha=0.3)+
geom_point(data=filter(toplot,label == "t" | label == "h"),
color = "red",size=1.5, alpha=1) +
geom_point(data=filter(toplot,label == "f"),
color = "white",size=1.5, alpha=1) +
xlab("log Fold Change")+
ylab("-log (p-value)")+
theme_bw()+
# xlim(c(-10, 10)) +
# ylim(c(0, 150)) +
geom_text_repel(data=filter(toplot,label=="h"), aes(label=genes), show.legend = FALSE, nudge_x = 0.5)+
# scale_colour_manual(name = "Hypoxia-regulated genes",
#                     values=cols,
#                     labels = res_sp$label)+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
p
ind = which(toplot$genes == "HIF1AN")
toplot = toplot[-ind,]
#subset of points to highlight
res_sp = subset(toplot,toplot$label == "t")
cols = c("t"="red","nt"="grey")
toplot$FDR = ifelse(-log(toplot$FDR) > 200, 0,toplot$FDR)
toplot$logFDR = log10(toplot$FDR)
p = ggplot(data=toplot, aes(x=logFC, y=-log10(FDR))) +
geom_point(color = "grey",alpha=0.3)+
geom_point(data=filter(toplot,label == "t" | label == "h"),
color = "red",size=1.5, alpha=1) +
geom_point(data=filter(toplot,label == "f"),
color = "white",size=1.5, alpha=1) +
xlab("log Fold Change")+
ylab("-log (p-value)")+
theme_bw()+
# xlim(c(-10, 10)) +
# ylim(c(0, 150)) +
geom_text_repel(data=filter(toplot,label=="h"), aes(label=genes), show.legend = FALSE, nudge_x = 0.5)+
# scale_colour_manual(name = "Hypoxia-regulated genes",
#                     values=cols,
#                     labels = res_sp$label)+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
p
table(toplot$label)
#### prepare data for Normalization by trimmed mean of M values (TMM) ####
x <- read.table("annotatedcounts_NT_LPS_james_20190513.txt", header=T, sep= "\t", row.names = 1)
#replace Hif1an.Hif1an with KO annotation
colnames(x) = gsub("Hif1an.Hif1an","KO",colnames(x))
#subset selected sample groups using %like% from data.table library, using 2 groups per time for downstream analyses
library(data.table)
# group1 = which(colnames(x) %like% "WT.NT")
# group2 = which(colnames(x) %like% "KO.NT")
# group3 = which(colnames(x) %like% "WT.LPS")
# group4 = which(colnames(x) %like% "KO.LPS")
ind_LPS = which(colnames(x) %like% "NT")
# length(group1)
# length(group2)
# length(group3)
# length(group4)
# x = x[ , c(group1,group2,group3,group4)]
# colnames(x)
# head(rownames(x))
#keep only batch2 for further analysis (42.2,43.5,41.6 litters)
x = x[,ind_LPS]
# x = x[,c(4:6,10:12,16:18,22:24)]
colnames(x)
head(rownames(x))
group <- factor(c(rep("1",4), rep("2",4)))
# group <- factor(c(rep("wt",3), rep("ko",3)))
# group <- factor(group, levels = c("wt","ko"))
y <- DGEList(counts = x,group=group)
# keep <- rowSums(cpm(y)>1) >= 1 #filter out lowly expressed genes
keep <- rowSums(cpm(y)>1) >= 4 #filter out lowly expressed genes
table(keep) #check how many genes are filtered out
y <- y[keep, , keep.lib.sizes=FALSE]
y <- calcNormFactors(y, method = "TMM") #TMM normalization
design <- model.matrix(~group)
colnames(design) <- levels(group)
#estimate dispersion of the negative binomial distribution to account for variability between biological replicates
y <- estimateDisp(y, design)
# summary(is_de)
# plotMD (res, status=is_de, values=c(1,-1), col=c("red","blue"),legend = "topright")
#
# fit = glmFit(y,design, robust = T)
# qlf = glmLRT(fit)
# results_glmQLFTest <- topTags(qlf, n = nrow(y), sort.by = "none")
# res_table = results_glmQLFTest$table
# res_table$genes = rownames(res_table)
# batch1_res_table = res_table
#use exactTest in the edgeR package as an alternative DEG analysis
et = exactTest(y)
results_exactTest <- topTags(et, n = nrow(y), sort.by = "none")
et_table = results_exactTest$table
et_table$genes = rownames(et_table)
#### prepare data for Normalization by trimmed mean of M values (TMM) ####
x <- read.table("annotatedcounts_NT_LPS_james_20190513.txt", header=T, sep= "\t", row.names = 1)
#replace Hif1an.Hif1an with KO annotation
colnames(x) = gsub("Hif1an.Hif1an","KO",colnames(x))
#subset selected sample groups using %like% from data.table library, using 2 groups per time for downstream analyses
library(data.table)
# group1 = which(colnames(x) %like% "WT.NT")
# group2 = which(colnames(x) %like% "KO.NT")
# group3 = which(colnames(x) %like% "WT.LPS")
# group4 = which(colnames(x) %like% "KO.LPS")
ind_LPS = which(colnames(x) %like% "LPS")
# length(group1)
# length(group2)
# length(group3)
# length(group4)
# x = x[ , c(group1,group2,group3,group4)]
# colnames(x)
# head(rownames(x))
#keep only batch2 for further analysis (42.2,43.5,41.6 litters)
x = x[,ind_LPS]
# x = x[,c(4:6,10:12,16:18,22:24)]
colnames(x)
head(rownames(x))
group <- factor(c(rep("1",4), rep("2",4)))
# group <- factor(c(rep("wt",3), rep("ko",3)))
# group <- factor(group, levels = c("wt","ko"))
y <- DGEList(counts = x,group=group)
# keep <- rowSums(cpm(y)>1) >= 1 #filter out lowly expressed genes
keep <- rowSums(cpm(y)>1) >= 4 #filter out lowly expressed genes
table(keep) #check how many genes are filtered out
y <- y[keep, , keep.lib.sizes=FALSE]
y <- calcNormFactors(y, method = "TMM") #TMM normalization
design <- model.matrix(~group)
colnames(design) <- levels(group)
#estimate dispersion of the negative binomial distribution to account for variability between biological replicates
y <- estimateDisp(y, design)
# summary(is_de)
# plotMD (res, status=is_de, values=c(1,-1), col=c("red","blue"),legend = "topright")
#
# fit = glmFit(y,design, robust = T)
# qlf = glmLRT(fit)
# results_glmQLFTest <- topTags(qlf, n = nrow(y), sort.by = "none")
# res_table = results_glmQLFTest$table
# res_table$genes = rownames(res_table)
# batch1_res_table = res_table
#use exactTest in the edgeR package as an alternative DEG analysis
et = exactTest(y)
results_exactTest <- topTags(et, n = nrow(y), sort.by = "none")
et_table = results_exactTest$table
et_table$genes = rownames(et_table)
######Figure 1 volcano plot of DEGs in untreated (NT) and LPS-treated (LPS) FIH-WT vs FIH-KO macrophages######
toplot = et_table
#### create a heatmap of DEGs ####
# Threshold:
degs = subset(toplot,toplot$FDR<0.05 &
abs(toplot$logFC) > 1)
View(degs)
######Figure 1 volcano plot of DEGs in untreated (NT) and LPS-treated (LPS) FIH-WT vs FIH-KO macrophages######
toplot = et_table
toplot$genes = rownames(toplot)
toplot$Threshold = if_else(toplot$FDR<0.05 & toplot$logFC > 1 ,"pos_hit",
if_else(toplot$FDR<0.05 & toplot$logFC < 1 ,"neg_hit","non_hit"))
# toplot$group = if_else(rownames(toplot) %in% hiftargetslist,1,0)
toplot$label = if_else((toplot$Threshold == "pos_hit") | (toplot$Threshold == "neg_hit"), "t","n")
toplot$label = ifelse(toplot$genes %in% hiftargetslist & toplot$label == "t","h",toplot$label)
table(toplot$label)
ind = which(toplot$genes == "HIF1AN")
toplot = toplot[-ind,]
#subset of points to highlight
res_sp = subset(toplot,toplot$label == "t")
cols = c("t"="red","nt"="grey")
toplot$FDR = ifelse(-log(toplot$FDR) > 200, 0,toplot$FDR)
toplot$logFDR = log10(toplot$FDR)
p = ggplot(data=toplot, aes(x=logFC, y=-log10(FDR))) +
geom_point(color = "grey",alpha=0.3)+
geom_point(data=filter(toplot,label == "t" | label == "h"),
color = "red",size=1.5, alpha=1) +
geom_point(data=filter(toplot,label == "f"),
color = "white",size=1.5, alpha=1) +
xlab("log Fold Change")+
ylab("-log (p-value)")+
theme_bw()+
# xlim(c(-10, 10)) +
# ylim(c(0, 150)) +
geom_text_repel(data=filter(toplot,label=="h"), aes(label=genes), show.legend = FALSE, nudge_x = 0.5)+
# scale_colour_manual(name = "Hypoxia-regulated genes",
#                     values=cols,
#                     labels = res_sp$label)+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
p
View(toplot)
######Figure 1 volcano plot of DEGs in untreated (NT) and LPS-treated (LPS) FIH-WT vs FIH-KO macrophages######
toplot = et_table
# toplot$group = if_else(rownames(toplot) %in% hiftargetslist,1,0)
toplot$label = if_else((toplot$FDR<0.05 & abs(toplot$logFC) > 1), "t","n")
toplot$label = ifelse(toplot$genes %in% hiftargetslist & toplot$label == "t","h",toplot$label)
table(toplot$label)
ind = which(toplot$genes == "HIF1AN")
toplot = toplot[-ind,]
p = ggplot(data=toplot, aes(x=logFC, y=-log10(FDR))) +
geom_point(color = "grey",alpha=0.3)+
geom_point(data=filter(toplot,label == "t" | label == "h"),
color = "red",size=1.5, alpha=1) +
geom_point(data=filter(toplot,label == "f"),
color = "white",size=1.5, alpha=1) +
xlab("log Fold Change")+
ylab("-log (p-value)")+
theme_bw()+
# xlim(c(-10, 10)) +
# ylim(c(0, 150)) +
geom_text_repel(data=filter(toplot,label=="h"), aes(label=genes), show.legend = FALSE, nudge_x = 0.5)+
# scale_colour_manual(name = "Hypoxia-regulated genes",
#                     values=cols,
#                     labels = res_sp$label)+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
p
table(toplot$label)
#### create a heatmap of DEGs ####
# Threshold:
degs = subset(toplot,toplot$FDR<0.05 &
abs(toplot$logFC) > 1)
degs$hif = ifelse(degs$genes %in% hiftargetslist, 1, 0)
tmm = as.data.frame(cpm(y))
tmm$symbol = rownames(tmm)
tmm = as.data.frame(cpm(y))
View(tmm)
ind = which(rownames(tmm) %in% degs$genes)
tmm = [ind,]
tmm = tmm[ind,]
View(tmm)
row.order <- hclust(dist(tmm))$order # clustering
col.order <- hclust(dist(t(tmm)))$order
row.order <- hclust(dist(tmm))$order # clustering
row.order
# col.order <- hclust(dist(t(tmm)))$order
tmm = log2(tmm)
View(tmm)
row.order <- hclust(dist(tmm))$order # clustering
row.order
pheatmap(tmm)
tmm = as.data.frame(cpm(y))
ind = which(rownames(tmm) %in% degs$genes)
tmm = tmm[ind,]
pheatmap(tmm)
# col.order <- hclust(dist(t(tmm)))$order
tmm = log2(tmm)
pheatmap(tmm)
pheatmap(tmm, color = colorspace::diverge_hsv(100))
tmm = as.data.frame(cpm(y))
ind = which(rownames(tmm) %in% degs$genes)
tmm = tmm[ind,]
row.order <- hclust(dist(tmm))$order # clustering
pheatmap(tmm, color = colorspace::diverge_hsv(100))
# col.order <- hclust(dist(t(tmm)))$order
tmm = log2(tmm)
tmm = as.data.frame(cpm(y))
ind = which(rownames(tmm) %in% degs$genes)
tmm = tmm[ind,]
tmm = t.data.frame(tmm)
View(tmm)
library(psycho)
library(tidyverse)
install.packages("psycho")
install.packages("tidyverse")
library(psycho)
library(tidyverse)
z_tmm <- tmm %>%
psycho::standardize()
z_tmm = as.data.frame(z_tmm)
View(z_tmm)
z_tmm <- standardize(tmm)
View(tmm)
z_tmm <- standardize(as.data.frame(tmm))
View(z_tmm)
View(tmm)
tmm = as.data.frame(tmm)
View(tmm)
rownames(z_tmm) = c("WT#1","WT#2","WT#3","WT#4","FIHKO#1","FIHKO#2","FIHKO#3","FIHKO#4")
pheatmap(z_tmm, color = colorspace::diverge_hsv(100))
pheatmap(t(z_tmm), color = colorspace::diverge_hsv(100))
pheatmap(t(z_tmm), color = colorspace::diverge_hsv(100),cellwidth =5, cellheight= 5)
pheatmap(t(z_tmm), color = colorspace::diverge_hsv(100),cellwidth =10, cellheight= 10)
pheatmap(t(z_tmm), color = colorspace::diverge_hsv(100),cellwidth =20, cellheight= 20)
pheatmap(t(z_tmm), color = colorspace::diverge_hsv(100),cellwidth =30, cellheight= 30)
pheatmap(t(z_tmm), color = colorspace::diverge_hsv(100),cellwidth =40, cellheight= 40)
pheatmap(t(z_tmm), color = colorspace::diverge_hsv(100),cellwidth =35, cellheight= 35)
#### create a heatmap of DEGs ####
# Threshold:
degs = subset(toplot,toplot$FDR<0.05 &
abs(toplot$logFC) > 0)
View(degs)
tmm = as.data.frame(cpm(y))
ind = which(rownames(tmm) %in% degs$genes)
tmm = tmm[ind,]
tmm = t.data.frame(tmm)
library(psycho)
library(tidyverse)
tmm = as.data.frame(tmm)
z_tmm <- standardize(as.data.frame(tmm))
z_tmm = as.data.frame(z_tmm)
rownames(z_tmm) = c("WT#1","WT#2","WT#3","WT#4","FIHKO#1","FIHKO#2","FIHKO#3","FIHKO#4")
row.order <- hclust(dist(tmm))$order # clustering
pheatmap(t(z_tmm), color = colorspace::diverge_hsv(100),cellwidth =35, cellheight= 35)
pheatmap(z_tmm, color = colorspace::diverge_hsv(100),cellwidth =35, cellheight= 35)
pheatmap(z_tmm, color = colorspace::diverge_hsv(100),cellwidth =20, cellheight= 20)
#### prepare data for Normalization by trimmed mean of M values (TMM) ####
x <- read.table("annotatedcounts_NT_LPS_james_20190513.txt", header=T, sep= "\t", row.names = 1)
#replace Hif1an.Hif1an with KO annotation
colnames(x) = gsub("Hif1an.Hif1an","KO",colnames(x))
#subset selected sample groups using %like% from data.table library, using 2 groups per time for downstream analyses
library(data.table)
# group1 = which(colnames(x) %like% "WT.NT")
# group2 = which(colnames(x) %like% "KO.NT")
# group3 = which(colnames(x) %like% "WT.LPS")
# group4 = which(colnames(x) %like% "KO.LPS")
ind_LPS = which(colnames(x) %like% "NT")
# length(group1)
# length(group2)
# length(group3)
# length(group4)
# x = x[ , c(group1,group2,group3,group4)]
# colnames(x)
# head(rownames(x))
#keep only batch2 for further analysis (42.2,43.5,41.6 litters)
x = x[,ind_LPS]
# x = x[,c(4:6,10:12,16:18,22:24)]
colnames(x)
head(rownames(x))
group <- factor(c(rep("1",4), rep("2",4)))
# group <- factor(c(rep("wt",3), rep("ko",3)))
# group <- factor(group, levels = c("wt","ko"))
y <- DGEList(counts = x,group=group)
# keep <- rowSums(cpm(y)>1) >= 1 #filter out lowly expressed genes
keep <- rowSums(cpm(y)>1) >= 4 #filter out lowly expressed genes
table(keep) #check how many genes are filtered out
y <- y[keep, , keep.lib.sizes=FALSE]
y <- calcNormFactors(y, method = "TMM") #TMM normalization
design <- model.matrix(~group)
colnames(design) <- levels(group)
#estimate dispersion of the negative binomial distribution to account for variability between biological replicates
y <- estimateDisp(y, design)
# summary(is_de)
# plotMD (res, status=is_de, values=c(1,-1), col=c("red","blue"),legend = "topright")
#
# fit = glmFit(y,design, robust = T)
# qlf = glmLRT(fit)
# results_glmQLFTest <- topTags(qlf, n = nrow(y), sort.by = "none")
# res_table = results_glmQLFTest$table
# res_table$genes = rownames(res_table)
# batch1_res_table = res_table
#use exactTest in the edgeR package as an alternative DEG analysis
et = exactTest(y)
results_exactTest <- topTags(et, n = nrow(y), sort.by = "none")
et_table = results_exactTest$table
et_table$genes = rownames(et_table)
######Figure 1 volcano plot of DEGs in untreated (NT) and LPS-treated (LPS) FIH-WT vs FIH-KO macrophages######
toplot = et_table
# hiftargetslist = read.csv("/James Chan/20180412_P53IP_James/pan_caner/Msigdbdir/hifbindingsites_corrected.csv",header=F,stringsAsFactors = F)
# hiftargetslist = as.character(unique(hiftargetslist$V1))
hiftargetslist = c(hiftargetslist,"ARG1")
View(toplot)
toplot$genes = rownames(toplot)
toplot$Threshold = if_else(toplot$FDR<0.05 & toplot$logFC > 1 ,"pos_hit",
if_else(toplot$FDR<0.05 & toplot$logFC < 1 ,"neg_hit","non_hit"))
# toplot$group = if_else(rownames(toplot) %in% hiftargetslist,1,0)
toplot$label = if_else((toplot$FDR<0.05 & abs(toplot$logFC) > 1), "t","n")
toplot$label = ifelse(toplot$genes %in% hiftargetslist & toplot$label == "t","h",toplot$label)
table(toplot$label)
ind = which(toplot$genes == "HIF1AN")
toplot = toplot[-ind,]
#subset of points to highlight
res_sp = subset(toplot,toplot$label == "t")
cols = c("t"="red","nt"="grey")
p = ggplot(data=toplot, aes(x=logFC, y=-log10(FDR))) +
geom_point(color = "grey",alpha=0.3)+
geom_point(data=filter(toplot,label == "t" | label == "h"),
color = "red",size=1.5, alpha=1) +
geom_point(data=filter(toplot,label == "f"),
color = "white",size=1.5, alpha=1) +
xlab("log Fold Change")+
ylab("-log (p-value)")+
theme_bw()+
# xlim(c(-10, 10)) +
# ylim(c(0, 150)) +
geom_text_repel(data=filter(toplot,label=="h"), aes(label=genes), show.legend = FALSE, nudge_x = 0.5)+
# scale_colour_manual(name = "Hypoxia-regulated genes",
#                     values=cols,
#                     labels = res_sp$label)+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
p
#### create a heatmap of DEGs ####
# Threshold:
degs = subset(toplot,toplot$FDR<0.05 &
abs(toplot$logFC) > 1)
View(degs)
degs$hif = ifelse(degs$genes %in% hiftargetslist, 1, 0)
tmm = as.data.frame(cpm(y))
ind = which(rownames(tmm) %in% degs$genes)
tmm = tmm[ind,]
tmm = t.data.frame(tmm)
library(psycho)
library(tidyverse)
tmm = as.data.frame(tmm)
z_tmm <- standardize(as.data.frame(tmm))
z_tmm = as.data.frame(z_tmm)
rownames(z_tmm) = c("WT#1","WT#2","WT#3","WT#4","FIHKO#1","FIHKO#2","FIHKO#3","FIHKO#4")
row.order <- hclust(dist(tmm))$order # clustering
# col.order <- hclust(dist(t(tmm)))$order
tmm = log2(tmm)
tmm$symbol = rownames(tmm)
tmm = tmm[,c(32,1:31)]
table(degs$hif)
pheatmap(z_tmm, color = colorspace::diverge_hsv(100),cellwidth =20, cellheight= 20)
pheatmap(t(z_tmm), color = colorspace::diverge_hsv(100),cellwidth =20, cellheight= 20)
pheatmap(t(z_tmm), color = colorspace::diverge_hsv(100),cellwidth =30, cellheight= 30)
pheatmap(t(z_tmm), color = colorspace::diverge_hsv(100),cellwidth =35, cellheight= 35)
pheatmap(t(z_tmm), color = colorspace::diverge_hsv(100),cellwidth =20, cellheight= 20)
pheatmap(t(z_tmm), color = colorspace::diverge_hsv(100),cellwidth =25, cellheight= 25)
#### prepare data for Normalization by trimmed mean of M values (TMM) ####
x <- read.table("annotatedcounts_IL4_CT26_james_20190513.txt", header=T, sep= "\t", row.names = 1)
#replace Hif1an.Hif1an with KO annotation
colnames(x) = gsub("Hif1an.Hif1an","KO",colnames(x))
#subset selected sample groups using %like% from data.table library, using 2 groups per time for downstream analyses
library(data.table)
# group1 = which(colnames(x) %like% "WT.NT")
# group2 = which(colnames(x) %like% "KO.NT")
# group3 = which(colnames(x) %like% "WT.LPS")
# group4 = which(colnames(x) %like% "KO.LPS")
ind_LPS = which(colnames(x) %like% "NT")
# group1 = which(colnames(x) %like% "WT.NT")
# group2 = which(colnames(x) %like% "KO.NT")
# group3 = which(colnames(x) %like% "WT.LPS")
# group4 = which(colnames(x) %like% "KO.LPS")
ind_LPS = which(colnames(x) %like% "CT26")
# length(group1)
# length(group2)
# length(group3)
# length(group4)
# x = x[ , c(group1,group2,group3,group4)]
# colnames(x)
# head(rownames(x))
#keep only batch2 for further analysis (42.2,43.5,41.6 litters)
x = x[,ind_LPS]
# x = x[,c(4:6,10:12,16:18,22:24)]
colnames(x)
head(rownames(x))
group <- factor(c(rep("1",4), rep("2",4)))
# group <- factor(c(rep("wt",3), rep("ko",3)))
# group <- factor(group, levels = c("wt","ko"))
y <- DGEList(counts = x,group=group)
# keep <- rowSums(cpm(y)>1) >= 1 #filter out lowly expressed genes
keep <- rowSums(cpm(y)>1) >= 4 #filter out lowly expressed genes
table(keep) #check how many genes are filtered out
y <- y[keep, , keep.lib.sizes=FALSE]
y <- calcNormFactors(y, method = "TMM") #TMM normalization
design <- model.matrix(~group)
colnames(design) <- levels(group)
#estimate dispersion of the negative binomial distribution to account for variability between biological replicates
y <- estimateDisp(y, design)
# summary(is_de)
# plotMD (res, status=is_de, values=c(1,-1), col=c("red","blue"),legend = "topright")
#
# fit = glmFit(y,design, robust = T)
# qlf = glmLRT(fit)
# results_glmQLFTest <- topTags(qlf, n = nrow(y), sort.by = "none")
# res_table = results_glmQLFTest$table
# res_table$genes = rownames(res_table)
# batch1_res_table = res_table
#use exactTest in the edgeR package as an alternative DEG analysis
et = exactTest(y)
results_exactTest <- topTags(et, n = nrow(y), sort.by = "none")
et_table = results_exactTest$table
et_table$genes = rownames(et_table)
######Figure 1 volcano plot of DEGs in untreated (NT) and LPS-treated (LPS) FIH-WT vs FIH-KO macrophages######
toplot = et_table
#### create a heatmap of DEGs ####
# Threshold:
degs = subset(toplot,toplot$FDR<0.05 &
abs(toplot$logFC) > 1)
degs$hif = ifelse(degs$genes %in% hiftargetslist, 1, 0)
tmm = as.data.frame(cpm(y))
View(degs)
#### create a heatmap of DEGs ####
# Threshold:
degs = subset(toplot,toplot$FDR<0.05 &
abs(toplot$logFC) > 0)
View(degs)
#### create a heatmap of DEGs ####
# Threshold:
degs = subset(toplot,toplot$FDR<0.05 &
abs(toplot$logFC) > 1)
degs$hif = ifelse(degs$genes %in% hiftargetslist, 1, 0)
tmm = as.data.frame(cpm(y))
ind = which(rownames(tmm) %in% degs$genes)
tmm = tmm[ind,]
tmm = t.data.frame(tmm)
library(psycho)
library(tidyverse)
tmm = as.data.frame(tmm)
View(degs)
degs = degs[-3,]
View(degs)
ind = which(rownames(tmm) %in% degs$genes)
tmm = as.data.frame(cpm(y))
ind = which(rownames(tmm) %in% degs$genes)
tmm = tmm[ind,]
tmm = t.data.frame(tmm)
library(psycho)
library(tidyverse)
tmm = as.data.frame(tmm)
z_tmm <- standardize(as.data.frame(tmm))
z_tmm = as.data.frame(z_tmm)
rownames(z_tmm) = c("WT#1","WT#2","WT#3","WT#4","FIHKO#1","FIHKO#2","FIHKO#3","FIHKO#4")
row.order <- hclust(dist(tmm))$order # clustering
# col.order <- hclust(dist(t(tmm)))$order
tmm = log2(tmm)
tmm$symbol = rownames(tmm)
tmm = tmm[,c(32,1:31)]
table(degs$hif)
pheatmap(t(z_tmm), color = colorspace::diverge_hsv(100),cellwidth =25, cellheight= 25)
pheatmap(t(z_tmm), color = colorspace::diverge_hsv(100),cellwidth =25, cellheight= 25, fontsize_col = 0)
